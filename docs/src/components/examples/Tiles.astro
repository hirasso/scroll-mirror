---
interface Props {
  amount: number;
  direction: "vertical" | "horizontal" | "both";
  uniqueid: string;
  startHue?: number;
}
const { amount, uniqueid, direction } = Astro.props;
const startHue = Astro.props.startHue || 0;

const getTestId = (index: number): string => {
  if (index === 0) return `${uniqueid}_tile--first`;
  if (index === amount - 1) return `${uniqueid}_tile--last`;
  return `${uniqueid}_tile--${index+1}`;
};

const getLabel = (index: number): string => {
  if (index === 0) return 'first';
  if (index === amount -1) return 'last';
  return String(index + 1);
}
---

<ul class:list={['tiles', `tiles--${direction}`]}>
  {
    [...Array(amount)].map((data, index) => (
      <li
        class="tile"
        style={{ "--hue": (startHue + index * 10) % 360 }}
        data-testid={getTestId(index)}
      >
        {getLabel(index)}
      </li>
    ))
  }
</ul>

<style>
  .tile {
    display: grid;
    place-content: center;
    background: hsl(var(--hue), var(--saturation), var(--lightness));
  }
  .tiles--vertical .tile {
    padding-block: 1rem;
  }
  .tiles--vertical .tile + .tile {
    /* border-top: var(--border-style); */
  }
  .tiles--horizontal {
    display: flex;
  }
  .tiles--horizontal .tile {
    flex: none;
    width: 10rem;
    aspect-ratio: 3 / 2;
  }
  .tiles--horizontal .tile + .tile {
    /* border-left: var(--border-style); */
  }
  .tiles--both {
    display: grid;
    grid-template-columns: repeat( auto-fit, minmax(7rem, 1fr) );
    width: 400%;
  }
  .tiles--both .tile {
    aspect-ratio: 3 / 2;
  }
</style>
